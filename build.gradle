import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id "org.sonarqube" version "2.6.1"
    id "org.owasp.dependencycheck" version "3.3.1"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'jacoco'

def externalFileName = "$projectDir/.external"
if (file(externalFileName).exists()) {
    apply from: "external.gradle"
} else {
    apply from: "monext.gradle"
}

description = 'payment-method-p24'
group 'com.payline.payment.p24'
version '1.3-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext {
    paymentMethodVersion = '1.1-SNAPSHOT'
    integrationVersion = '1.1-SNAPSHOT'
    powerMockVersion = '1.7.0'
    releaseDirectoryPath = 'D:/build'
}

configurations {
    fatJarTest
}

sonarqube {
    properties {
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property 'sonar.dependencyCheck.htmlReportPath', "${project.buildDir}/reports/dependency-check-report.html"
    }
}

dependencyCheck {
    format 'ALL'
}


dependencies {
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.10'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'

    compileOnly "com.payline:payment-method-api:${paymentMethodVersion}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'

    testRuntimeOnly group: 'commons-lang', name: 'commons-lang', version: '2.6'
    // JUnit and Mockito
    testImplementation "junit:junit:4.11"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.22.0'

    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.13.0'
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.13.0'
    testImplementation "com.payline:payment-method-api:${paymentMethodVersion}"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.0.3'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.3'

    // fatJarTest include testImplementation dependencies (not for IT)
    fatJarTest "junit:junit:4.11"
    fatJarTest group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
    fatJarTest group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.0.3'
    fatJarTest group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.3'
}

assemble.dependsOn shadowJar

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('com.payline:payment-method-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-api:2.11.0'))
        exclude(dependency('org.apache.logging.log4j:log4j-core:2.11.0'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-params:5.0.3'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-api:5.0.3'))
        exclude(dependency('org.seleniumhq.selenium:selenium-server:3.13.0'))
        exclude(dependency('org.seleniumhq.selenium:selenium-support:3.13.0'))
    }
}


jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

task buildToLocal(type: Copy) {
    dependsOn shadowJar
    from shadowJar
    into "${releaseDirectoryPath}"
}

task printVersion {
    doLast {
        println version
    }
}

processResources {
    filesMatching('release.properties') {
        filter( ReplaceTokens, tokens:[
                'version': project.version.replaceFirst("-.*", ""),
                'date': new Date().format("dd/MM/yyyy")
        ])
    }
}

// To create a JAR including test classes and dependencies
task testJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    dependsOn 'shadowJar', 'testClasses'
    classifier = 'tests'
    from sourceSets.test.output.classesDirs + shadowJar
    configurations = [project.configurations.fatJarTest]
}

test.exclude '**/test/integration/*'




